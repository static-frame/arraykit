import typing as tp
from automap import FrozenAutoMap

import numpy as np  # type: ignore

_T = tp.TypeVar('_T')
_DtypeSpecifier = tp.Optional[tp.Union[str, np.dtype, type]]

__version__: str

class ArrayGO:

    values: np.array
    def __init__(
        self, iterable: tp.Iterable[object], *, own_iterable: bool = ...
    ) -> None: ...
    def __iter__(self) -> tp.Iterator[tp.Any]: ...
    def __getitem__(self, __key: object) -> tp.Any: ...
    def __len__(self) -> int: ...
    def __getnewargs__(self) -> tp.Tuple[np.ndarray]: ...
    def append(self, __value: object) -> None: ...
    def copy(self: _T) -> _T: ...
    def extend(self, __values: tp.Iterable[object]) -> None: ...

def immutable_filter(__array: np.array) -> np.array: ...
def mloc(__array: np.array) -> int: ...
def name_filter(__name: tp.Hashable) -> tp.Hashable: ...
def shape_filter(__array: np.array) -> np.ndarray: ...
def column_2d_filter(__array: np.array) -> np.ndarray: ...
def column_1d_filter(__array: np.array) -> np.ndarray: ...
def row_1d_filter(__array: np.array) -> np.ndarray: ...
def array_deepcopy(__array: np.array, memo: tp.Dict[int, tp.Any]) -> np.ndarray: ...
def resolve_dtype(__d1: np.dtype, __d2: np.dtype) -> np.dtype: ...
def resolve_dtype_iter(__dtypes: tp.Iterable[np.dtype]) -> np.dtype: ...
def isna_element(__value: tp.Any) -> bool: ...
def dtype_from_element(__value: tp.Optional[tp.Hashable]) -> np.dtype: ...
def is_gen_copy_values(__values: tp.Iterable[tp.Any]) -> tp.Tuple[bool, bool]: ...
def prepare_iter_for_array(
        __values: tp.Iterable[tp.Any],
        restrict_copy: bool = ...,
        ) -> tp.Tuple[_DtypeSpecifier, bool, tp.Sequence[tp.Any]]: ...

